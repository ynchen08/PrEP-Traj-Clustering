#Install relevant packages
install.packages("lcmm")
library(lcmm)
library(tidyr)
library(renv)
library(dplyr)
# install.packages("rlang")
library(rlang)
# install.packages("devtools")
devtools::install_github("hlennon/LCTMtools")
library(LCTMtools)

renv::dependencies()

renv::init()

#Import input data
setwd("C:/Users/yche465/Desktop/AIM 1/Codes/PrEP-Traj-Clustering/Export")
SeroProtect=read.delim("SeroProtect.txt",sep=",",header=FALSE)
colnames(SeroProtect)=c("ID",sapply(1:103, function(i){
  paste0("Protect",i)
}))

#Convert wide to long format
SP_long=SeroProtect%>%gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
SP_long$Week=gsub("Protect","",SP_long$Week)%>%as.numeric()
SP_long=SP_long%>%arrange(ID,Week)
##scale down the time variable to facilitate model convergence
SP_long$Week=SP_long$Week/10  


#Run 1-group latent class trajectory model
mod=list()
mod[[1]]=lcmm(Protect~1+Week+I(Week^2), subject='ID',ng=1,data=SP_long, link="thresholds", maxiter=200)  


#Run k-group latent class trajectory model (k=2~6): in-loop run time = 8 hrs
 

for (k in 2:6){
  ## Single random initialization run
  # n_param=(3*k)+(k-1)
  # Bvec=rnorm(n_param,0,1)
  # mod[[k]]=lcmm(fixed=Protect~1+Week+I(Week^2),random=~-1, mixture=~1+Week+I(Week^2),subject='ID',ng=k,data=SP_long, link="thresholds",nwg=FALSE, B=Bvec)
  
  ## Random grid search initialization 
  mod[[k]]=gridsearch(rep = 20, maxiter = 15, minit = mod[[1]],lcmm(fixed=Protect~1+Week+I(Week^2),random=~-1, mixture=~1+Week+I(Week^2),subject='ID',ng=k,data=SP_long, link="thresholds",nwg=FALSE))
}

#Run K-group latent class trajectory model (k=2~6): parallel
  ##Note: I was not able to fun the gridsearch function in for-loop, k is recognized as a character rather than the iterated variable in that function...
  Ncore=detectCores() 
  mod[[2]]=gridsearch(rep = 20, maxiter = 15, minit = mod[[1]],lcmm(fixed=Protect~1+Week+I(Week^2),random=~-1, mixture=~1+Week+I(Week^2),subject='ID',ng=2,data=SP_long, link="thresholds",nwg=FALSE),cl=5)
  mod[[3]]=gridsearch(rep = 20, maxiter = 15, minit = mod[[1]],lcmm(fixed=Protect~1+Week+I(Week^2),random=~-1, mixture=~1+Week+I(Week^2),subject='ID',ng=3,data=SP_long, link="thresholds",nwg=FALSE),cl=5)
  mod[[4]]=gridsearch(rep = 20, maxiter = 15, minit = mod[[1]],lcmm(fixed=Protect~1+Week+I(Week^2),random=~-1, mixture=~1+Week+I(Week^2),subject='ID',ng=4,data=SP_long, link="thresholds",nwg=FALSE),cl=5)
  mod[[5]]=gridsearch(rep = 20, maxiter = 15, minit = mod[[1]],lcmm(fixed=Protect~1+Week+I(Week^2),random=~-1, mixture=~1+Week+I(Week^2),subject='ID',ng=5,data=SP_long, link="thresholds",nwg=FALSE),cl=5)
  mod[[6]]=gridsearch(rep = 20, maxiter = 15, minit = mod[[1]],lcmm(fixed=Protect~1+Week+I(Week^2),random=~-1, mixture=~1+Week+I(Week^2),subject='ID',ng=6,data=SP_long, link="thresholds",nwg=FALSE),cl=5)
  

saveRDS(mod,"GBTM_mods")
##BIC and % of class membership
for (k in 1:length(mod)){
  bf=mod[[k]]%>%summarytable()%>%as.data.frame()
  if (k==1){
    BaseFit=bf
  } else{
    BaseFit=bind_rows(BaseFit,bf)
  }
}
rownames(BaseFit)=NULL
##Average posterior probabilities
for (k in 2:length(mod)){
  appa=LCTMtoolkit(mod[[k]])$appa
  rownames(appa)=NULL
  colnames(appa)=c(sapply(1:k, function(i){
    paste0("APPA_C",i)
  }))
  if (k==2){
    APPA=appa
  } else {
    APPA=bind_rows(APPA,appa)
  }
}
APPA=c(1,rep(NA,dim(APPA)[2]-1))%>%rbind(., APPA)

## Odds of correct classification
for (k in 2:length(mod)){
  occ=LCTMtoolkit(mod[[k]])$occ
  rownames(occ)=NULL
  colnames(occ)=c(sapply(1:k, function(i){
    paste0("OCC_C",i)
  }))
  if (k==2){
    OCC=occ
  } else {
    OCC=bind_rows(OCC,occ)
  }
}
OCC=rep(NA,dim(OCC)[2])%>%rbind(., OCC)

FitTab=cbind(BaseFit,APPA,OCC)


##Plot estimated mean trajectory
datnew=data.frame(Week = seq(1, 103)/10)
par(mfrow=c(3,2),oma=c(1,1,1.5,1)+0.1,mar=c(4,4,3,1)+0.1)

for (k in 1:length(mod)){
  Legend=c(sapply(1:k, function(i){
    paste0("Group ",i)
  }))
  plotpred=predictY(mod[[k]],datnew,var.time="Week", draws=TRUE)
  plot(plotpred,lty=1, xlab="Week", ylab="Probability", shades=TRUE, xaxt="n", yaxt="n",legend=NULL,main=paste0("K=",k))
  legend("topright",Legend,cex=0.5,lty=1, col=1:k,bty = "n")
  axis(1, at =seq(0, 103, by=10)/10,label=seq(0, 103, by=10))
  axis(2,at=seq(0,1,by=0.1), label=seq(0,1,by=0.1),las=1)
}
mtext("Group-specific predicted trajectory of PrEP sero-protection", side=3,line = 0,outer = TRUE)


