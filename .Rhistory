t1=Sys.time()
slow_sum(1:100)
slow_sum(101:200)
t2=Sys.time()
timediff(t2,t1)
difftime(t2,t1)
t3=Sys.time()
a %<% slow_sum(1:100)
t3=Sys.time()
a %<-% slow_sum(1:100)
b %<-% slow_sum(101:200)
t4=Sys.time()
difftime(t4,t3)
a
b
t3=Sys.time()
a %<-% slow_sum(201:300)
b %<-% slow_sum(301:400)
t4=Sys.time()
difftime(t4,t3)
b
a
t1=Sys.time()
a=slow_sum(201:300)
b=slow_sum(301:400)
y=a+b
t2=Sys.time()
difftime(t2,t1)
t3=Sys.time()
a %<-% slow_sum(201:300)
b %<-% slow_sum(301:400)
y=a+b
t4=Sys.time()
difftime(t4,t3)
t1=Sys.time()
A=list()
for (i in 1:5){
A[[i]] %<-% slow_sum((1+i*100):(100+i*100))
}
A=list()
for (i in 1:5){
A[[i]] %<-% slow_sum((1+i*100):(100+i*100))
}
t1=Sys.time()
A=list()
for (i in 1:5){
A[[i]] =future({slow_sum((1+i*100):(100+i*100))})
}
A[[5]]
v=lapply(A,FUN=value)
v
RUN1[[1]]$`Model coefficients`
RUN1[[2]]$`Model coefficients`
a %<-% testfunc(inputdata = SP_wide,
iter=1,
rep = 20,
maxiter = 10,
m=lcmm(fixed=Protect~1+Week+I(Week^2),
random=~-1,
mixture=~1+Week+I(Week^2),
subject='ID',
ng=2,
link="thresholds",
nwg=FALSE))
b %<-% testfunc(inputdata = SP_wide,
iter=2,
rep = 20,
maxiter = 10,
m=lcmm(fixed=Protect~1+Week+I(Week^2),
random=~-1,
mixture=~1+Week+I(Week^2),
subject='ID',
ng=2,
link="thresholds",
nwg=FALSE))
a
b
b$`Model coefficients`
a$`Model coefficients`
RUN1[[1]]$`Model coefficients`
RUN1[[2]]$`Model coefficients`
v
t3=Sys.time()
par.run=list()
for (i in 1:5){
par.run[[i]]= future({
testfunc(inputdata = SP_wide,
iter=i,
rep = 20,
maxiter = 10,
m=lcmm(fixed=Protect~1+Week+I(Week^2),
random=~-1,
mixture=~1+Week+I(Week^2),
subject='ID',
ng=2,
link="thresholds",
nwg=FALSE))
},seed=TRUE)
}
RUN2=lapply(par.run,FUN=value)
difftime(t4,t3)
length(RUN2)
par.run
lapply(par.run,FUN=value)
difftime(t4,t3)
t4=Sys.time()
t3=Sys.time()
par.run=list()
for (i in 1:2){
par.run[[i]]= future({
testfunc(inputdata = SP_wide,
iter=i,
rep = 20,
maxiter = 10,
m=lcmm(fixed=Protect~1+Week+I(Week^2),
random=~-1,
mixture=~1+Week+I(Week^2),
subject='ID',
ng=2,
link="thresholds",
nwg=FALSE))
},seed=TRUE)
}
RUN2=lapply(par.run,FUN=value)
saveRDS(RUN1,here("Export","paraRUN1"))
RUN1=readRDS(here("Export","paraRUN1"))
library(here)
library(utils)
RUN1=readRDS(here("Export","paraRUN1"))
locateprob=function(i){
return(as.matrix(predprob[i,-c(1,2)]))
}
consensus=function(subject.i,subject.j){
X=ifelse(subject.i==subject.j,NA,
rowSums(locateprob(subject.i)*locateprob(subject.j)))
return(X)
}
consensus_prob=function(j){
predprob=RUN1[[j]]$`Predicted class membership`
index=predprob$ID
index.pair=combn(1:length(index),2)
ID.pair=index[index.pair]%>%matrix(nrow=2)
cons.prob.dat=rbind(ID.pair,consensus(index.pair[1,],index.pair[2,]))%>%t()
return(cons.prob.dat)
}
T1=Sys.time()
CONSPROB_ALL=lapply(1:length(RUN1),consensus_prob)
library(here)
library(utils)
library(lcmm)
library(tidyr)
library(renv)
library(dplyr)
library(rlang)
library(LCTMtools)
library(here)
library(ellipsis)
RUN1=readRDS(here("Export","paraRUN1"))
locateprob=function(i){
return(as.matrix(predprob[i,-c(1,2)]))
}
consensus=function(subject.i,subject.j){
X=ifelse(subject.i==subject.j,NA,
rowSums(locateprob(subject.i)*locateprob(subject.j)))
return(X)
}
consensus_prob=function(j){
predprob=RUN1[[j]]$`Predicted class membership`
index=predprob$ID
index.pair=combn(1:length(index),2)
ID.pair=index[index.pair]%>%matrix(nrow=2)
cons.prob.dat=rbind(ID.pair,consensus(index.pair[1,],index.pair[2,]))%>%t()
return(cons.prob.dat)
}
T1=Sys.time()
CONSPROB_ALL=lapply(1:length(RUN1),consensus_prob)
debug(consensus_prob)
T1=Sys.time()
CONSPROB_ALL=lapply(1:length(RUN1),consensus_prob)
T2=Sys.time()
TD1=difftime(T2,T1, units="mins")
predprob=RUN1[[j]]$`Predicted class membership`
predprob
index=predprob$ID
index.pair=combn(1:length(index),2)
ID.pair=index[index.pair]%>%matrix(nrow=2)
cons.prob.dat=rbind(ID.pair,consensus(index.pair[1,],index.pair[2,]))%>%t()
consensus(index.pair[1,],index.pair[2,])
consensus_prob=function(j){
locateprob=function(i){
return(as.matrix(predprob[i,-c(1,2)]))
}
consensus=function(subject.i,subject.j){
X=ifelse(subject.i==subject.j,NA,
rowSums(locateprob(subject.i)*locateprob(subject.j)))
return(X)
}
predprob=RUN1[[j]]$`Predicted class membership`
index=predprob$ID
index.pair=combn(1:length(index),2)
ID.pair=index[index.pair]%>%matrix(nrow=2)
cons.prob.dat=rbind(ID.pair,consensus(index.pair[1,],index.pair[2,]))%>%t()
return(cons.prob.dat)
}
undebug(consensus_prob)
T1=Sys.time()
CONSPROB_ALL=lapply(1:length(RUN1),consensus_prob)
T2=Sys.time()
TD1=difftime(T2,T1, units="mins")
length(CONSPROB_ALL[[1]])
test=unlist(CONSPROB_ALL)
length(test)
length(CONSPROB_ALL[[1]])*5
head(CONSPROB_ALL)
head(CONSPROB_ALL[[1]])
consensus_prob=function(j){
locateprob=function(i){
return(as.matrix(predprob[i,-c(1,2)]))
}
consensus=function(subject.i,subject.j){
X=ifelse(subject.i==subject.j,NA,
rowSums(locateprob(subject.i)*locateprob(subject.j)))
return(X)
}
predprob=RUN1[[j]]$`Predicted class membership`
index=predprob$ID
index.pair=combn(1:length(index),2)
ID.pair=index[index.pair]%>%matrix(nrow=2)
cons.prob.dat=rbind(ID.pair,consensus(index.pair[1,],index.pair[2,]))%>%t()%>%data.frame()
colnames(cons.prob.dat)=c("ID1","ID2","consensus.prob")
return(cons.prob.dat)
}
T1=Sys.time()
CONSPROB_ALL=lapply(1:length(RUN1),consensus_prob)
T2=Sys.time()
TD1=difftime(T2,T1, units="mins")
head(CONSPROB_ALL[[1]])
test=unlist(CONSPROB_ALL)%>%group_by(ID1,ID2)
head(test)
test=unlist(CONSPROB_ALL)%>%arrange(ID1,ID2)
?arrange()
test=unlist(CONSPROB_ALL)%>%dplyr::arrange(ID1,ID2)
typeof(test$ID1)
typeof(test$ID1)
str(test)
head(CONSPROB_ALL[[1]])
CONSPROB_ALL2=CONSPROB_ALL[[1]]
for (i in 2:length(CONSPROB_ALL)){
CONSPROB_ALL2=rbind(CONSPROB_ALL2,CONSPROB_ALL[[i]])
}
dim(CONSPROB_ALL2)
dim(CONSPROB_ALL[[1]])
dim(CONSPROB_ALL[[1]])*5
test=CONSPROB_ALL2%>%dplyr::arrange(ID1,ID2)
head(test)
x=test%>%subset(ID1<ID2)
dim(x)
x=test%>%subset(ID1>ID2)
dim(x)
x=test%>%subset(ID1==ID2)
dim(x)
consensus_prob=function(j){
locateprob=function(i){
return(as.matrix(predprob[i,-c(1,2)]))
}
consensus=function(subject.i,subject.j){
X=ifelse(subject.i==subject.j,NA,
rowSums(locateprob(subject.i)*locateprob(subject.j)))
return(X)
}
predprob=RUN1[[j]]$`Predicted class membership`
index=predprob$ID
index.pair=combn(1:length(index),2)
ID.pair=index[index.pair]%>%matrix(nrow=2)
cons.prob.dat=rbind(ID.pair,consensus(index.pair[1,],index.pair[2,]))%>%t()%>%data.frame()
colnames(cons.prob.dat)=c("ID1","ID2","same.group.prob")
return(cons.prob.dat)
}
T1=Sys.time()
CONSPROB_ALL=lapply(1:length(RUN1),consensus_prob)
T2=Sys.time()
TD1=difftime(T2,T1, units="mins")
CONSPROB_ALL2=CONSPROB_ALL[[1]]
for (i in 2:length(CONSPROB_ALL)){
CONSPROB_ALL2=rbind(CONSPROB_ALL2,CONSPROB_ALL[[i]])
}
consensus_prob=function(j){
locateprob=function(i){
return(as.matrix(predprob[i,-c(1,2)]))
}
same.group.prob=function(subject.i,subject.j){
X=ifelse(subject.i==subject.j,NA,
rowSums(locateprob(subject.i)*locateprob(subject.j)))
return(X)
}
predprob=RUN1[[j]]$`Predicted class membership`
index=predprob$ID
index.pair=combn(1:length(index),2)
ID.pair=index[index.pair]%>%matrix(nrow=2)
cons.prob.dat=rbind(ID.pair,same.group.prob(index.pair[1,],index.pair[2,]))%>%t()%>%data.frame()
colnames(cons.prob.dat)=c("ID1","ID2","same.group.prob")
return(cons.prob.dat)
}
T1=Sys.time()
CONSPROB_ALL=lapply(1:length(RUN1),consensus_prob)
T2=Sys.time()
TD1=difftime(T2,T1, units="mins")
CONSPROB_ALL2=CONSPROB_ALL[[1]]
for (i in 2:length(CONSPROB_ALL)){
CONSPROB_ALL2=rbind(CONSPROB_ALL2,CONSPROB_ALL[[i]])
}
head(CONSPROB_ALL2)
CONSPROB=CONSPROB_ALL2%>%dplyr::arrange(ID1,ID2)%>%group_by(ID1,ID2)%>%summarise(consensus_prob=mean(same.group.prob),N_per_pair=n())
head(CONSPROB)
dim(CONSPROB)
CONSPROB$N_per_pair%>%table()
debug(consensus_prob)
consensus_prob=function(j){
locateprob=function(i){
return(as.matrix(predprob[i,-c(1,2)]))
}
same.group.prob=function(subject.i,subject.j){
X=ifelse(subject.i==subject.j,NA,
rowSums(locateprob(subject.i)*locateprob(subject.j)))
return(X)
}
predprob=RUN1[[j]]$`Predicted class membership`
index=predprob$ID
index.pair=combn(1:length(index),2)
ID.pair=index[index.pair]%>%matrix(nrow=2)
cons.prob.dat=rbind(ID.pair,same.group.prob(index.pair[1,],index.pair[2,]))%>%t()%>%data.frame()
colnames(cons.prob.dat)=c("ID1","ID2","same.group.prob")
return(cons.prob.dat)
}
CONSPROB_ALL=lapply(1:length(RUN1),consensus_prob)
consensus_prob=function(j){
locateprob=function(i){
return(as.matrix(predprob[i,-c(1,2)]))
}
same.group.prob=function(subject.i,subject.j){
X=ifelse(subject.i==subject.j,NA,
rowSums(locateprob(subject.i)*locateprob(subject.j)))
return(X)
}
predprob=RUN1[[j]]$`Predicted class membership`
index=predprob$ID
index.pair=combn(1:length(index),2)
ID.pair=index[index.pair]%>%matrix(nrow=2)
cons.prob.dat=rbind(ID.pair,same.group.prob(index.pair[1,],index.pair[2,]))%>%t()%>%data.frame()
colnames(cons.prob.dat)=c("ID1","ID2","same.group.prob")
return(cons.prob.dat)
}
debug(consensus_prob)
CONSPROB_ALL=lapply(1:length(RUN1),consensus_prob)
locateprob=function(i){
return(as.matrix(predprob[i,-c(1,2)]))
}
same.group.prob=function(subject.i,subject.j){
X=ifelse(subject.i==subject.j,NA,
rowSums(locateprob(subject.i)*locateprob(subject.j)))
return(X)
}
predprob=RUN1[[j]]$`Predicted class membership`
predprob
index=predprob$ID
index
index.pair=combn(1:length(index),2)
index.pair
index.pair[,1:10]
ID.pair=index[index.pair]%>%matrix(nrow=2)
ID.pair[,1:10]
index.pair[1,1:10]
index.pair[2,]
index.pair[2,1:10]
ID.pair[1:10]
ID.pair[,1:10]
undebug(consensus_prob)
cl=makeCluster(detectCores()-1)
CONSPROB_ALL=parLapply(1:length(RUN1),consensus_prob)
CONSPROB_ALL=parLapply(cl,1:length(RUN1),consensus_prob)
rm(list=ls())
library(here)
library(utils)
library(lcmm)
library(tidyr)
library(renv)
library(dplyr)
library(rlang)
library(LCTMtools)
library(here)
library(ellipsis)
RUN1=readRDS(here("Export","paraRUN1"))
cl=makeCluster(detectCores()-1)
clusterExport(cl,ls(),envir = environment())
CONSPROB_ALL=parLapply(cl,1:length(RUN1),consensus_prob)
stopCluster(cl)
consensus_prob=function(j){
locateprob=function(i){
return(as.matrix(predprob[i,-c(1,2)]))
}
same.group.prob=function(subject.i,subject.j){
X=ifelse(subject.i==subject.j,NA,
rowSums(locateprob(subject.i)*locateprob(subject.j)))
return(X)
}
predprob=RUN1[[j]]$`Predicted class membership`
index=predprob$ID
index.pair=combn(1:length(index),2)
ID.pair=index[index.pair]%>%matrix(nrow=2)
cons.prob.dat=rbind(ID.pair,same.group.prob(index.pair[1,],index.pair[2,]))%>%t()%>%data.frame()
colnames(cons.prob.dat)=c("ID1","ID2","same.group.prob")
return(cons.prob.dat)
}
cl=makeCluster(detectCores()-1)
clusterExport(cl,ls(),envir = environment())
CONSPROB_ALL=parLapply(cl,1:length(RUN1),consensus_prob)
consensus_prob=function(j){
library(here)
library(utils)
library(tidyr)
library(dplyr)
library(rlang)
library(ellipsis)
locateprob=function(i){
return(as.matrix(predprob[i,-c(1,2)]))
}
same.group.prob=function(subject.i,subject.j){
X=ifelse(subject.i==subject.j,NA,
rowSums(locateprob(subject.i)*locateprob(subject.j)))
return(X)
}
predprob=RUN1[[j]]$`Predicted class membership`
index=predprob$ID
index.pair=combn(1:length(index),2)
ID.pair=index[index.pair]%>%matrix(nrow=2)
cons.prob.dat=rbind(ID.pair,same.group.prob(index.pair[1,],index.pair[2,]))%>%t()%>%data.frame()
colnames(cons.prob.dat)=c("ID1","ID2","same.group.prob")
return(cons.prob.dat)
}
cl=makeCluster(detectCores()-1)
clusterExport(cl,ls(),envir = environment())
CONSPROB_ALL=parLapply(cl,1:length(RUN1),consensus_prob)
stopCluster(cl)
CONSPROB_ALL2=CONSPROB_ALL[[1]]
for (i in 2:length(CONSPROB_ALL)){
CONSPROB_ALL2=rbind(CONSPROB_ALL2,CONSPROB_ALL[[i]])
}
T1=Sys.time()
CONSPROB=CONSPROB_ALL2%>%dplyr::arrange(ID1,ID2)%>%group_by(ID1,ID2)%>%summarise(consensus_prob=mean(same.group.prob),N_per_pair=n())
T2=Sys.time()
TD1=difftime(T2,T1, units="mins")
TD1
T1=Sys.time()
cl=makeCluster(detectCores()-1)
clusterExport(cl,ls(),envir = environment())
CONSPROB_ALL=parLapply(cl,1:length(RUN1),consensus_prob)
stopCluster(cl)
T2=Sys.time()
TD1=difftime(T2,T1, units="mins")
TD1
T1=Sys.time()
# cl=makeCluster(detectCores()-1)
# clusterExport(cl,ls(),envir = environment())
CONSPROB_ALL=Lapply(1:length(RUN1),consensus_prob)
T1=Sys.time()
# cl=makeCluster(detectCores()-1)
# clusterExport(cl,ls(),envir = environment())
CONSPROB_ALL=lapply(1:length(RUN1),consensus_prob)
# stopCluster(cl)
T2=Sys.time()
TD1=difftime(T2,T1, units="mins")
TD1
T1=Sys.time()
cl=makeCluster(5)
clusterExport(cl,ls(),envir = environment())
CONSPROB_ALL=parLapply(cl,1:length(RUN1),consensus_prob)
stopCluster(cl)
T2=Sys.time()
TD1=difftime(T2,T1, units="mins")
TD1
hist(CONSPROB)
head(CONSPROB)
hist(CONSPROB$consensus_prob)
Consensus.Probabilities=CONSPROB$consensus_prob
hist(Consensus.Probabilities)
T1=Sys.time()
# cl=makeCluster(detectCores()-1)
# clusterExport(cl,ls(),envir = environment())
# CONSPROB_ALL=parLapply(cl,1:length(RUN1),consensus_prob)
# stopCluster(cl)
CONSPROB_ALL=lapply(cl,1:length(RUN1),consensus_prob)
RUN1=readRDS(here("Export","paraRUN1"))
T1=Sys.time()
# cl=makeCluster(detectCores()-1)
# clusterExport(cl,ls(),envir = environment())
# CONSPROB_ALL=parLapply(cl,1:length(RUN1),consensus_prob)
# stopCluster(cl)
CONSPROB_ALL=lapply(1:length(RUN1),consensus_prob)
CONSPROB_ALL2=CONSPROB_ALL[[1]]
for (i in 2:length(CONSPROB_ALL)){
CONSPROB_ALL2=rbind(CONSPROB_ALL2,CONSPROB_ALL[[i]])
}
CONSPROB=CONSPROB_ALL2%>%dplyr::arrange(ID1,ID2)%>%
group_by(ID1,ID2)%>%
summarise(consensus_prob=mean(same.group.prob),N_per_pair=n())
T2=Sys.time()
TD1=difftime(T2,T1, units="mins")
Consensus.Probabilities=CONSPROB$consensus_prob
hist(Consensus.Probabilities)
#Implement iterative resampling and model fitting --------------------------------------------
source(here('Programs','HelperFunc_ConsensusGBTM.R'))
TD1
