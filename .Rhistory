renv::restore()
#install.packages("lcmm")
library(lcmm)
library(tidyr)
library(renv)
library(dplyr)
# install.packages("rlang")
library(rlang)
# install.packages("devtools")
# renv::install("hlennon/LCTMtools")
library(LCTMtools)
#install.packages("lcmm")
library(lcmm)
library(tidyr)
library(renv)
library(dplyr)
# install.packages("rlang")
library(rlang)
library(LCTMtools)
renv::install("hlennon/LCTMtools")
library(LCTMtools)
library(here)
renv::dependencies()
renv::restore()
#Import input data
SeroProtect=read.delim(here("./Export/SeroProtect.txt"),sep=",",header=FALSE)
colnames(SeroProtect)=c("ID",sapply(1:103, function(i){
paste0("Protect",i)
}))
#Boostrapped to 8,000 data points
index <- sample(1:8000, 8000, replace=T)
SeroProtect <- SeroProtect[index,]
dim(SeroProtect)
SP_long=SeroProtect%>%gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
#Convert wide to long format
SP_long=SeroProtect%>%gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
library(lcmm)
library(tidyr)
library(renv)
library(dplyr)
# install.packages("rlang")
library(rlang)
# install.packages("devtools")
# renv::install("hlennon/LCTMtools")
library(LCTMtools)
# install.packages('here')
library(here)
#Convert wide to long format
SP_long=SeroProtect%>%gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
?gather
SeroProtect%>%gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
c(1,2,3,4)%>%mean()
SeroProtect
#Import input data
SeroProtect=read.delim(here("./Export/SeroProtect.txt"),sep=",",header=FALSE)
colnames(SeroProtect)=c("ID",sapply(1:103, function(i){
paste0("Protect",i)
}))
SeroProtect
index <- sample(1:8000, 8000, replace=T)
SeroProtect <- SeroProtect[index,]
SeroProtect
#Import input data
SeroProtect=read.delim(here("./Export/SeroProtect.txt"),sep=",",header=FALSE)
colnames(SeroProtect)=c("ID",sapply(1:103, function(i){
paste0("Protect",i)
}))
SeroProtect
View(SeroProtect)
SeroProtect$ID
SeroProtect$ID%>%mean()
is.na(SeroProtect$ID)
min(is.na(SeroProtect$ID))
max(is.na(SeroProtect$ID))
index <- sample(1:8000, 8000, replace=T)
index
#Import input data
SeroProtect=read.delim(here("./Export/SeroProtect.txt"),sep=",",header=FALSE)
colnames(SeroProtect)=c("ID",sapply(1:103, function(i){
paste0("Protect",i)
}))
#Boostrapped to 8,000 data points
index <- sample(1:nrow(SeroProtect), 8000, replace=T)
SeroProtect <- SeroProtect[index,]
SeroProtect$ID=1:dim(SeroProtect)[1]
dim(SeroProtect)
#Convert wide to long format
SP_long=SeroProtect%>%gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
View(SeroProtect)
SP_long=SeroProtect%>%tidyr::gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
install.packages('ellipsis')
library(ellipsis)
SP_long=SeroProtect%>%tidyr::gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
SP_long$Week=gsub("Protect","",SP_long$Week)%>%as.numeric()
SP_long=SP_long%>%arrange(ID,Week)
##scale down the time variable to facilitate model convergence
SP_long$Week=SP_long$Week/10
SP_long
#Boostrapped to 8,000 data points
set.seed(103)
index <- sample(1:nrow(SeroProtect), 8000, replace=T)
SeroProtect <- SeroProtect[index,]
SeroProtect$ID=1:dim(SeroProtect)[1]
#Convert wide to long format
SP_long=SeroProtect%>%tidyr::gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
SP_long$Week=gsub("Protect","",SP_long$Week)%>%as.numeric()
SP_long=SP_long%>%arrange(ID,Week)
##scale down the time variable to facilitate model convergence
SP_long$Week=SP_long$Week/10
index
index[1:10]
#Restore relevant packages
renv::dependencies()
#install.packages("lcmm")
library(lcmm)
library(tidyr)
library(renv)
library(dplyr)
# install.packages("rlang")
library(rlang)
# install.packages("devtools")
# renv::install("hlennon/LCTMtools")
library(LCTMtools)
# install.packages('here')
library(here)
# install.packages('ellipsis')
library(ellipsis)
#Import input data
SeroProtect=read.delim(here("./Export/SeroProtect.txt"),sep=",",header=FALSE)
colnames(SeroProtect)=c("ID",sapply(1:103, function(i){
paste0("Protect",i)
}))
#Boostrapped to 8,000 data points
set.seed(103)
index <- sample(1:nrow(SeroProtect), 8000, replace=T)
SeroProtect <- SeroProtect[index,]
SeroProtect$ID=1:dim(SeroProtect)[1]
print(index[1:20])
#Convert wide to long format
SP_long=SeroProtect%>%tidyr::gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
SP_long$Week=gsub("Protect","",SP_long$Week)%>%as.numeric()
SP_long=SP_long%>%arrange(ID,Week)
##scale down the time variable to facilitate model convergence
SP_long$Week=SP_long$Week/10
#Import input data
SeroProtect=read.delim(here("./Export/SeroProtect.txt"),sep=",",header=FALSE)
colnames(SeroProtect)=c("ID",sapply(1:103, function(i){
paste0("Protect",i)
}))
#Boostrapped to 8,000 data points
set.seed(103)
index <- sample(1:nrow(SeroProtect), 8000, replace=T)
SeroProtect <- SeroProtect[index,]
SeroProtect$ID=1:dim(SeroProtect)[1]
print(index[1:20])
#Convert wide to long format
SP_long=SeroProtect%>%tidyr::gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
SP_long$Week=gsub("Protect","",SP_long$Week)%>%as.numeric()
SP_long=SP_long%>%arrange(ID,Week)
##scale down the time variable to facilitate model convergence
SP_long$Week=SP_long$Week/10
#Import input data
SeroProtect=read.delim(here("./Export/SeroProtect.txt"),sep=",",header=FALSE)
colnames(SeroProtect)=c("ID",sapply(1:103, function(i){
paste0("Protect",i)
}))
#Boostrapped to 8,000 data points
set.seed(103)
index <- sample(1:nrow(SeroProtect), 8000, replace=T)
SeroProtect <- SeroProtect[index,]
SeroProtect$ID=1:dim(SeroProtect)[1]
print(index[1:20])
#Convert wide to long format
SP_long=SeroProtect%>%tidyr::gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
SP_long$Week=gsub("Protect","",SP_long$Week)%>%as.numeric()
SP_long=SP_long%>%arrange(ID,Week)
##scale down the time variable to facilitate model convergence
SP_long$Week=SP_long$Week/10
#Import input data
SeroProtect=read.delim(here("./Export/SeroProtect.txt"),sep=",",header=FALSE)
colnames(SeroProtect)=c("ID",sapply(1:103, function(i){
paste0("Protect",i)
}))
#Boostrapped to 8,000 data points
set.seed(103)
index <- sample(1:nrow(SeroProtect), 8000, replace=T)
SeroProtect <- SeroProtect[index,]
SeroProtect$ID=1:dim(SeroProtect)[1]
print(index[1:20])
#Convert wide to long format
SP_long=SeroProtect%>%tidyr::gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
SP_long$Week=gsub("Protect","",SP_long$Week)%>%as.numeric()
SP_long=SP_long%>%arrange(ID,Week)
##scale down the time variable to facilitate model convergence
SP_long$Week=SP_long$Week/10
#Import input data
SeroProtect=read.delim(here("./Export/SeroProtect.txt"),sep=",",header=FALSE)
colnames(SeroProtect)=c("ID",sapply(1:103, function(i){
paste0("Protect",i)
}))
#Boostrapped to 8,000 data points
set.seed(103)
index <- sample(1:nrow(SeroProtect), 8000, replace=T)
SeroProtect <- SeroProtect[index,]
SeroProtect$ID=1:dim(SeroProtect)[1]
print(index[1:20])
#Convert wide to long format
SP_long=SeroProtect%>%tidyr::gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
SP_long$Week=gsub("Protect","",SP_long$Week)%>%as.numeric()
SP_long=SP_long%>%arrange(ID,Week)
##scale down the time variable to facilitate model convergence
SP_long$Week=SP_long$Week/10
saveRDS(SP_long,home("./Export/SP_long"))
library(lcmm)
library(tidyr)
library(renv)
library(dplyr)
# install.packages("rlang")
library(rlang)
# install.packages("devtools")
# renv::install("hlennon/LCTMtools")
library(LCTMtools)
# install.packages('here')
library(here)
# install.packages('ellipsis')
library(ellipsis)
#Import input data
SeroProtect=read.delim(here("./Export/SeroProtect.txt"),sep=",",header=FALSE)
colnames(SeroProtect)=c("ID",sapply(1:103, function(i){
paste0("Protect",i)
}))
#Boostrapped to 8,000 data points
set.seed(103)
index <- sample(1:nrow(SeroProtect), 8000, replace=T)
SeroProtect <- SeroProtect[index,]
SeroProtect$ID=1:dim(SeroProtect)[1]
print(index[1:20])
#Convert wide to long format
SP_long=SeroProtect%>%tidyr::gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
SP_long$Week=gsub("Protect","",SP_long$Week)%>%as.numeric()
SP_long=SP_long%>%arrange(ID,Week)
##scale down the time variable to facilitate model convergence
SP_long$Week=SP_long$Week/10
saveRDS(SP_long,here("./Export/SP_long"))
renv::snapshot()
renv::snapshot()
#Restore relevant packages
renv::dependencies()
#Import input data
SeroProtect=read.delim(here("./Export/SeroProtect.txt"),sep=",",header=FALSE)
colnames(SeroProtect)=c("ID",sapply(1:103, function(i){
paste0("Protect",i)
}))
#Boostrapped to 8,000 data points
set.seed(103)
index <- sample(1:nrow(SeroProtect), 8000, replace=T)
SeroProtect <- SeroProtect[index,]
SeroProtect$ID=1:dim(SeroProtect)[1]
print(index[1:20])
#Convert wide to long format
SP_long=SeroProtect%>%tidyr::gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
SP_long$Week=gsub("Protect","",SP_long$Week)%>%as.numeric()
SP_long=SP_long%>%arrange(ID,Week)
##scale down the time variable to facilitate model convergence
SP_long$Week=SP_long$Week/10
saveRDS(SP_long,here("./Export/SP_long"))
#Run 1-group latent class trajectory model
mod=list()
mod[[1]]=lcmm(Protect~1+Week+I(Week^2), subject='ID',ng=1,data=SP_long, link="thresholds", maxiter=200)
#Run K-group latent class trajectory model (k=2~7): parallel gridsearch
##Note: I was not able to fun the gridsearch function in for-loop, k is recognized as a character rather than the iterated variable in that function...
num_maxit=20
num_rep=50
Ncore=detectCores()
t1=Sys.time()
mod[[2]]=gridsearch(rep = num_rep, maxiter = num_maxit, minit = mod[[1]],lcmm(fixed=Protect~1+Week+I(Week^2),random=~-1, mixture=~1+Week+I(Week^2),subject='ID',ng=2,data=SP_long, link="thresholds",nwg=FALSE),cl=Ncore-1)
Ncore=detectCores()
print(Ncore)
num_maxit=20
num_rep=50
Ncore=detectCores()
print(Ncore)
t1=Sys.time()
mod[[2]]=gridsearch(rep = num_rep, maxiter = num_maxit, minit = mod[[1]],lcmm(fixed=Protect~1+Week+I(Week^2),random=~-1, mixture=~1+Week+I(Week^2),subject='ID',ng=2,data=SP_long, link="thresholds",nwg=FALSE),cl=Ncore-1)
