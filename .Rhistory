}))
#Convert wide to long format
SP_long=SeroProtect%>%tidyr::gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
SP_long$Week=gsub("Protect","",SP_long$Week)%>%as.numeric()
SP_long=SP_long%>%arrange(ID,Week)
##scale down the time variable to facilitate model convergence
SP_long$Week=SP_long$Week/10
saveRDS(SP_long,here("./Data/SP_long_4k"))
#Run 1-group latent class trajectory model
mod=list()
mod[[1]]=lcmm(Protect~1+Week+I(Week^2), subject='ID',ng=1,data=SP_long, link="thresholds", maxiter=200)
source(here("Programs","Helper_Functions_GBTM.R"))
num_rep=20
num_maxit=10
Time_rep20maxit10=rep(NA,6)
mod[[2]]=mod[[3]]=mod[[4]]=mod[[5]]=mod[[6]]=NULL
for (k in 2:6){
cat("K=",k)
t1=Sys.time()
cl=makeCluster(Ncore-1)
clusterExport(cl,list("k",'lcmm'),environment())
mod[[k]]=gridsearch(rep = num_rep, maxiter = num_maxit, minit = mod[[1]],
lcmm(fixed=Protect~1+Week+I(Week^2),random=~-1, mixture=~1+Week+I(Week^2),
subject='ID',ng=k,data=SP_long, link="thresholds",nwg=FALSE),cl=cl)
stopCluster(cl)
t2=Sys.time()
Time_rep20maxit10[k]=difftime(t2,t1,units ='mins')
}
num_rep=20
num_maxit=10
Ncore=detectCores()-1
Time_rep20maxit10=rep(NA,6)
mod[[2]]=mod[[3]]=mod[[4]]=mod[[5]]=mod[[6]]=NULL
for (k in 2:6){
cat("K=",k)
t1=Sys.time()
cl=makeCluster(Ncore-1)
clusterExport(cl,list("k",'lcmm'),environment())
mod[[k]]=gridsearch(rep = num_rep, maxiter = num_maxit, minit = mod[[1]],
lcmm(fixed=Protect~1+Week+I(Week^2),random=~-1, mixture=~1+Week+I(Week^2),
subject='ID',ng=k,data=SP_long, link="thresholds",nwg=FALSE),cl=cl)
stopCluster(cl)
t2=Sys.time()
Time_rep20maxit10[k]=difftime(t2,t1,units ='mins')
}
library(doParallel)
library(doSNOW)
library(future)
renv::restore()
renv::snapshot()
ExportStats=readRDS(here("Export\test\ExportStats_rep20maxit10"))
Stats_rep20maxit10=readRDS(here("./Export/test/ExportStats_rep20maxit10"))
library(here)
Stats_rep20maxit10=readRDS(here("./Export/test/ExportStats_rep20maxit10"))
Stats_rep20maxit10
renv::restore()
library(gt)
# install.packages('webshot2')
library(webshot2)
# install.packages("matrixStats")
library(matrixStats)
library(here)
Stats_rep50maxit30=readRDS(here("./Export/test/ExportStats_rep50maxit30"))
Stats_rep50maxit20=readRDS(here("./Export/test/ExportStats_rep50maxit20"))
Stats_rep50maxit10=readRDS(here("./Export/test/ExportStats_rep50maxit10_2"))
Stats_rep35maxit30=readRDS(here("./Export/test/ExportStats_rep35maxit30"))
Stats_rep35maxit20=readRDS(here("./Export/test/ExportStats_rep35maxit20"))
Stats_rep35maxit10=readRDS(here("./Export/test/ExportStats_rep35maxit10_2"))
Stats_rep20maxit30=readRDS(here("./Export/test/ExportStats_rep20maxit30"))
Stats_rep20maxit20=readRDS(here("./Export/test/ExportStats_rep20maxit20"))
Stats_rep20maxit10=readRDS(here("./Export/test/ExportStats_rep20maxit10"))
RunTime=rbind(Stats_rep50maxit30[[1]],
Stats_rep50maxit20[[1]],
Stats_rep50maxit10[[1]],
Stats_rep35maxit30[[1]],
Stats_rep35maxit20[[1]],
Stats_rep35maxit10[[1]],
Stats_rep20maxit30[[1]],
Stats_rep20maxit20[[1]],
Stats_rep20maxit10[[1]])
Num.Rand.Init=c(50,50,50,35,35,35,20,20,20)
Max.Iter=rep(c(30,20,10),3)
RunTime2=cbind(Num.Rand.Init,Max.Iter,RunTime[,-1])%>%data.frame()
colnames(RunTime2)=c("Num.Rand.Init","Max.Iter","K=2","K=3","K=4","K=5","K=6")
RunTime=round(RunTime2)
RunTime
x=as.matrix((Stats_rep50maxit30[[2]][,c('APPA_C1', 'APPA_C2', 'APPA_C3', 'APPA_C4', 'APPA_C5', 'APPA_C6')]))
Min.APPA_rep50maxit30=rowMins(x,na.rm = TRUE)
x
as.matrix((Stats_rep50maxit20[[2]][,c('APPA_C1', 'APPA_C2', 'APPA_C3', 'APPA_C4', 'APPA_C5', 'APPA_C6')]))
Min.APPA_rep50maxit20=rowMins(x,na.rm = TRUE)
x=as.matrix((Stats_rep50maxit30[[2]][,c('APPA_C1', 'APPA_C2', 'APPA_C3', 'APPA_C4', 'APPA_C5', 'APPA_C6')]))
Min.APPA_rep50maxit30=rowMins(x,na.rm = TRUE)
x=as.matrix((Stats_rep50maxit20[[2]][,c('APPA_C1', 'APPA_C2', 'APPA_C3', 'APPA_C4', 'APPA_C5', 'APPA_C6')]))
Min.APPA_rep50maxit20=rowMins(x,na.rm = TRUE)
x=as.matrix((Stats_rep50maxit10[[2]][,c('APPA_C1', 'APPA_C2', 'APPA_C3', 'APPA_C4', 'APPA_C5', 'APPA_C6')]))
Min.APPA_rep50maxit10=rowMins(x,na.rm = TRUE)
x=as.matrix((Stats_rep35maxit30[[2]][,c('APPA_C1', 'APPA_C2', 'APPA_C3', 'APPA_C4', 'APPA_C5', 'APPA_C6')]))
Min.APPA_rep35maxit30=rowMins(x,na.rm = TRUE)
x=as.matrix((Stats_rep35maxit20[[2]][,c('APPA_C1', 'APPA_C2', 'APPA_C3', 'APPA_C4', 'APPA_C5', 'APPA_C6')]))
Min.APPA_rep35maxit20=rowMins(x,na.rm = TRUE)
x=as.matrix((Stats_rep35maxit10[[2]][,c('APPA_C1', 'APPA_C2', 'APPA_C3', 'APPA_C4', 'APPA_C5', 'APPA_C6')]))
Min.APPA_rep35maxit10=rowMins(x,na.rm = TRUE)
x=as.matrix((Stats_rep20maxit30[[2]][,c('APPA_C1', 'APPA_C2', 'APPA_C3', 'APPA_C4', 'APPA_C5', 'APPA_C6')]))
Min.APPA_rep20maxit30=rowMins(x,na.rm = TRUE)
x=as.matrix((Stats_rep20maxit20[[2]][,c('APPA_C1', 'APPA_C2', 'APPA_C3', 'APPA_C4', 'APPA_C5', 'APPA_C6')]))
Min.APPA_rep20maxit20=rowMins(x,na.rm = TRUE)
x=as.matrix((Stats_rep20maxit10[[2]][,c('APPA_C1', 'APPA_C2', 'APPA_C3', 'APPA_C4', 'APPA_C5', 'APPA_C6')]))
Min.APPA_rep20maxit10=rowMins(x,na.rm = TRUE)
Min.APPA=cbind(Min.APPA_rep50maxit30,
Min.APPA_rep50maxit20,
Min.APPA_rep50maxit10,
Min.APPA_rep35maxit30,
Min.APPA_rep35maxit20,
Min.APPA_rep35maxit10,
Min.APPA_rep20maxit30,
Min.APPA_rep20maxit20,
Min.APPA_rep20maxit10)
Min.APPA
appa_clean=function(Stats){
x=as.matrix((Stats[[2]][,c('APPA_C1', 'APPA_C2', 'APPA_C3', 'APPA_C4', 'APPA_C5', 'APPA_C6')]))
min_APPA=rowMins(x,na.rm = TRUE)
return(min_APPA)
}
Min.APPA_rep50maxit30=appa_clean(Stats_rep50maxit30)
Min.APPA_rep50maxit30
Min.APPA_rep50maxit30=appa_clean(Stats_rep50maxit30)
Min.APPA_rep50maxit20=appa_clean(Stats_rep50maxit20)
Min.APPA_rep50maxit10=appa_clean(Stats_rep50maxit10)
Min.APPA_rep35maxit30=appa_clean(Stats_rep35maxit30)
Min.APPA_rep35maxit20=appa_clean(Stats_rep35maxit20)
Min.APPA_rep35maxit10=appa_clean(Stats_rep35maxit10)
Min.APPA_rep20maxit30=appa_clean(Stats_rep20maxit30)
Min.APPA_rep20maxit20=appa_clean(Stats_rep20maxit20)
Min.APPA_rep20maxit10=appa_clean(Stats_rep20maxit10)
Min.APPA=cbind(Min.APPA_rep50maxit30,
Min.APPA_rep50maxit20,
Min.APPA_rep50maxit10,
Min.APPA_rep35maxit30,
Min.APPA_rep35maxit20,
Min.APPA_rep35maxit10,
Min.APPA_rep20maxit30,
Min.APPA_rep20maxit20,
Min.APPA_rep20maxit10)
Min.APPA=Min.APPA[-1,]
colnames(Min.APPA)=c("rep50maxit30","rep50maxit20","rep50maxit10",
"rep35maxit30","rep35maxit20","rep35maxit10",
"rep20maxit30","rep20maxit20","rep20maxit10")
row.names(Min.APPA)=c("K=2","K=3","K=4","K=5","K=6")
Min.APPA
cq=c('loglik','BIC')
CQ=list()
for (i in 1:length(cq)){
CQ[[i]]=cbind(Stats_rep50maxit30[[2]][cq[i]],
Stats_rep50maxit20[[2]][cq[i]],
Stats_rep50maxit10[[2]][cq[i]],
Stats_rep35maxit30[[2]][cq[i]],
Stats_rep35maxit20[[2]][cq[i]],
Stats_rep35maxit10[[2]][cq[i]],
Stats_rep20maxit30[[2]][cq[i]],
Stats_rep20maxit20[[2]][cq[i]],
Stats_rep20maxit10[[2]][cq[i]])
colnames(CQ[[i]])=c("rep50maxit30","rep50maxit20","rep50maxit10",
"rep35maxit30","rep35maxit20","rep35maxit10",
"rep20maxit30","rep20maxit20","rep20maxit10")
row.names(CQ[[i]])=c("k=1","K=2","K=3","K=4","K=5","K=6")
names(CQ)[i]=cq[i]
}
CQ[[3]]=Min.APPA
names(CQ)[3]="Min. APPA"
runtime_tab=RunTime%>%gt()%>%tab_header(title=md("**GBTM run time across various model optimization parameters (in minutes)**")) %>%cols_label(Num.Rand.Init="Rand.Init")
runtime_tab
runtime_tab=RunTime%>%gt()%>%tab_header(title=md("**GBTM run time across various model optimization parameters (in minutes)**")) %>%cols_label(Num.Rand.Init="Rand.Init")
gtsave(runtime_tab, filename =here("Figures/test", "runtime_Tab.png"))
gtsave(runtime_tab, filename =here("./Figures/test", "runtime_Tab.png"))
gtsave(runtime_tab, filename =here("./Figures/test/runtime_Tab.png"))
gtsave(runtime_tab, filename =here("./Figures/test/runtime_Tab.png"))
getwd()
?gtsave
renv::restore()
library(gt)
runtime_tab=RunTime%>%gt()%>%tab_header(title=md("**GBTM run time across various model optimization parameters (in minutes)**")) %>%cols_label(Num.Rand.Init="Rand.Init")
gtsave(runtime_tab, filename =here("./Figures/test/runtime_Tab2.png"))
runtime_tab
runtime_tab=RunTime%>%gt()%>%tab_header(title=md("**GBTM run time across various model optimization parameters (in minutes)**")) %>%cols_label(Num.Rand.Init="Rand.Init")
gtsave(runtime_tab, filename =here("./Figures/test/runtime_Tab.png"))
loglk_tab=cbind(K=1:6,CQ[[1]])%>%gt()%>%tab_header(title=md("**Log-likelihood across various model optimization parameters**"))%>%tab_spanner(label="Random Initial Values=50", columns=2:4)%>%tab_spanner(label="Random Initial Values=35", columns=5:7)%>%tab_spanner(label="Random Initial Values=20", columns=8:10)%>%cols_label(rep50maxit30="Max.Iter=30",rep50maxit20="Max.Iter=20",rep50maxit10="Max.Iter=10",rep35maxit30="Max.Iter=30",rep35maxit20="Max.Iter=20",rep35maxit10="Max.Iter=10",rep20maxit30="Max.Iter=30",rep20maxit20="Max.Iter=20",rep20maxit10="Max.Iter=10")
gtsave(loglk_tab, filename =here("./Figures/test/loglk_Tab.png"))
BIC_tab=cbind(K=1:6,CQ[[2]])%>%gt()%>%tab_header(title=md("**BIC across various model optimization parameters**"))%>%tab_spanner(label="Random Initial Values=50", columns=2:4)%>%tab_spanner(label="Random Initial Values=35", columns=5:7)%>%tab_spanner(label="Random Initial Values=20", columns=8:10)%>%cols_label(rep50maxit30="Max.Iter=30",rep50maxit20="Max.Iter=20",rep50maxit10="Max.Iter=10",rep35maxit30="Max.Iter=30",rep35maxit20="Max.Iter=20",rep35maxit10="Max.Iter=10",rep20maxit30="Max.Iter=30",rep20maxit20="Max.Iter=20",rep20maxit10="Max.Iter=10")
gtsave(BIC_tab, filename =here("./Figures/test/BIC_Tab.png"))
gtsave(APPA_tab, filename =here("./Figures/test/APPA_Tab.png"))
APPA_tab=cbind(K=2:6,CQ[[3]])%>%data.frame()%>%gt()%>%tab_header(title=md("**Minimum average posterior probability across various model optimization parameters**"))%>%tab_spanner(label="Random Initial Values=50", columns=2:4)%>%tab_spanner(label="Random Initial Values=35", columns=5:7)%>%tab_spanner(label="Random Initial Values=20", columns=8:10)%>%cols_label(rep50maxit30="Max.Iter=30",rep50maxit20="Max.Iter=20",rep50maxit10="Max.Iter=10",rep35maxit30="Max.Iter=30",rep35maxit20="Max.Iter=20",rep35maxit10="Max.Iter=10",rep20maxit30="Max.Iter=30",rep20maxit20="Max.Iter=20",rep20maxit10="Max.Iter=10")
gtsave(APPA_tab, filename =here("./Figures/test/APPA_Tab.png"))
Mod_rep50maxit30=readRDS(here("./Export/test/GBTM_mods_rep50maxit30"))
Mod_rep50maxit20=readRDS(here("./Export/test/GBTM_mods_rep50maxit20"))
Mod_rep50maxit10=readRDS(here("./Export/test/GBTM_mods_rep50maxit10_2"))
Mod_rep35maxit30=readRDS(here("./Export/test/GBTM_mods_rep35maxit30"))
Mod_rep35maxit20=readRDS(here("./Export/test/GBTM_mods_rep35maxit20"))
Mod_rep35maxit10=readRDS(here("./Export/test/GBTM_mods_rep35maxit10_2"))
Mod_rep20maxit30=readRDS(here("./Export/test/GBTM_mods_rep20maxit30"))
Mod_rep20maxit20=readRDS(here("./Export/test/GBTM_mods_rep20maxit20"))
Mod_rep20maxit10=readRDS(here("./Export/test/GBTM_mods_rep20maxit10"))
SP_long=readRDS(here("./Export/test/SP_long"))
Mod_rep20maxit10
##create function to plot estimated mean trajectory
plotGBTM=function(mod){
datnew=data.frame(Week = seq(1, 103)/10)
par(mfrow=c(3,2),oma=c(1,1,1.5,1)+0.1,mar=c(4,4,3,1)+0.1)
for (k in 1:length(mod)){
Legend=c(sapply(1:k, function(i){
paste0("Group ",i)
}))
plotpred=predictY(mod[[k]],datnew,var.time="Week", draws=TRUE)
plot(plotpred,lty=1, xlab="Week", ylab="Probability", shades=TRUE, xaxt="n", yaxt="n",legend=NULL,main=paste0("K=",k))
legend("topright",Legend,cex=0.5,lty=1, col=1:k,bty = "n")
axis(1, at =seq(0, 103, by=10)/10,label=seq(0, 103, by=10))
axis(2,at=seq(0,1,by=0.1), label=seq(0,1,by=0.1),las=1)
}
obj=deparse(substitute(mod))
params=regmatches(obj, gregexpr("[[:digit:]]+", obj))[[1]]%>%as.numeric()
title=sprintf("Predicted trajectories of PrEP sero-protection (Rand.Init=%d, Maxiter=%d)",params[1],params[2])
mtext(title, side=3,line = 0,outer = TRUE)
}
plotGBTM(Mod_rep20maxit10)
library(lcmm)
plotGBTM(Mod_rep20maxit10)
plotpred
SP_long
rm(SP_long)
SP_long
plotGBTM=function(mod){
datnew=data.frame(Week = seq(1, 103)/10)
par(mfrow=c(3,2),oma=c(1,1,1.5,1)+0.1,mar=c(4,4,3,1)+0.1)
for (k in 1:length(mod)){
Legend=c(sapply(1:k, function(i){
paste0("Group ",i)
}))
plotpred=predictY(mod[[k]],datnew,var.time="Week", draws=TRUE)
plot(plotpred,lty=1, xlab="Week", ylab="Probability", shades=TRUE, xaxt="n", yaxt="n",legend=NULL,main=paste0("K=",k))
legend("topright",Legend,cex=0.5,lty=1, col=1:k,bty = "n")
axis(1, at =seq(0, 103, by=10)/10,label=seq(0, 103, by=10))
axis(2,at=seq(0,1,by=0.1), label=seq(0,1,by=0.1),las=1)
}
obj=deparse(substitute(mod))
params=regmatches(obj, gregexpr("[[:digit:]]+", obj))[[1]]%>%as.numeric()
title=sprintf("Predicted trajectories of PrEP sero-protection (Rand.Init=%d, Maxiter=%d)",params[1],params[2])
mtext(title, side=3,line = 0,outer = TRUE)
}
k=1
Legend=c(sapply(1:k, function(i){
paste0("Group ",i)
}))
Legend
mod=Mod_rep20maxit20
predictY(mod[[k]],datnew,var.time="Week", draws=TRUE)
datnew=data.frame(Week = seq(1, 103)/10)
predictY(mod[[k]],datnew,var.time="Week", draws=TRUE)
SP_long_4k=readRDS(SP_long_4k)
predictY(mod[[k]],datnew,var.time="Week", draws=TRUE)
SP_long_4k=readRDS(here("Data","SP_long_4k")
)
predictY(mod[[k]],datnew,var.time="Week", draws=TRUE)
SP_long=readRDS(here("Data","SP_long_4k"))
predictY(mod[[k]],datnew,var.time="Week", draws=TRUE)
plotpred=predictY(mod[[k]],datnew,var.time="Week", draws=TRUE)
plotpred
head(plotpred)
plot(plotpred,lty=1, xlab="Week", ylab="Probability", shades=TRUE, xaxt="n", yaxt="n",legend=NULL,main=paste0("K=",k))
plotpred=predictY(mod[[k]],datnew,var.time="Week", draws=2000)
plotpred
mod[[k]]$estimlink
predictlink(mod[[k]],ndraws=2000,Yvalues=mod[[k]]$estimlink)
predictlink(mod[[k]],ndraws=2000)
plot(Mod_rep20maxit10[[2]])
?plot
plot(Mod_rep20maxit10[[2]],which="linkfunction")
?lcmm::plot
plot(Mod_rep20maxit10[[2]],which="postprob")
plot(Mod_rep20maxit10[[2]],which="postprob")
?lcmm::plot
plot(Mod_rep20maxit10[[2]],which="fit")
SP_long
plot(Mod_rep20maxit10[[2]],which="fit",var.time="Week")
obj=deparse(substitute(mod))
obj
params=regmatches(obj, gregexpr("[[:digit:]]+", obj))[[1]]%>%as.numeric()
params
title=sprintf("Predicted trajectories of PrEP sero-protection (Rand.Init=%d, Maxiter=%d)",params[1],params[2])
title
plotGBTM=function(mod){
datnew=data.frame(Week = seq(1, 103)/10)
par(mfrow=c(3,2),oma=c(1,1,1.5,1)+0.1,mar=c(4,4,3,1)+0.1)
for (k in 1:length(mod)){
Legend=c(sapply(1:k, function(i){
paste0("Group ",i)
}))
plotpred=predictY(mod[[k]],datnew,var.time="Week", draws=2000)
plot(plotpred,lty=1, xlab="Week", ylab="Probability", shades=TRUE, xaxt="n", yaxt="n",legend=NULL,main=paste0("K=",k))
legend("topright",Legend,cex=0.5,lty=1, col=1:k,bty = "n")
axis(1, at =seq(0, 103, by=10)/10,label=seq(0, 103, by=10))
axis(2,at=seq(0,1,by=0.1), label=seq(0,1,by=0.1),las=1)
}
obj=deparse(substitute(mod))
params=regmatches(obj, gregexpr("[[:digit:]]+", obj))[[1]]%>%as.numeric()
title=sprintf("Predicted trajectories of PrEP sero-protection (Rand.Init=%d, Maxiter=%d)",params[1],params[2])
mtext(title, side=3,line = 0,outer = TRUE)
}
plotGBTM(Mod_rep20maxit20)
Stats_rep20maxit10
source("C:/Users/yche465/Desktop/AIM 1/Codes/PrEP-Traj-Clustering/Programs/Phase1_View_Results.R", echo=TRUE)
Mod_rep20maxit20[[3]]$pprob
Mod_rep20maxit20[[3]]$estimlink
Mod_rep20maxit20[[3]]$Ydiscrete
postprob(Mod_rep20maxit20[[3]])
Mod_rep20maxit20[[3]]$data
Mod_rep20maxit20[[3]]$IndivContrib
Mod_rep20maxit20[[3]]$call
Mod_rep20maxit20[[3]]$UACV
Mod_rep20maxit20[[3]]$idea0
str(Mod_rep20maxit20[[3]])
Mod_rep20maxit20[[3]]$best
Mod_rep20maxit20[[3]]$ide
Mod_rep20maxit20[[3]]$linknodes
Mod_rep20maxit20[[3]]$Xnames2
Mod_rep20maxit20[[3]]$
postprob
Mod_rep20maxit20[[3]]$postprob
Mod_rep20maxit20[[3]]$pprob
table(SP_long$ID)
SP_long
min(SP_long$ID)
max(SP_long$ID)
x=Mod_rep20maxit20[[3]]$pprob
min(x$ID)
max(x$ID)
SeroProtect
SeroProtect=read.delim(here("./Data/SeroProtect_4k.txt"),sep=",",header=FALSE)
colnames(SeroProtect)=c("ID",sapply(1:103, function(i){
paste0("Protect",i)
}))
SeroProtect
head(x)
Mod_rep20maxit20[[2]]$pprob
x=Mod_rep20maxit20[[2]]$pprob
head(x)
SeroProtect[1,]
head(SeroProtect)
head(x)
head(SeroProtect)
mean(SeroProtect[1,])
SeroProtect[1,]
mean(SeroProtect[1,])
SeroProtect[1,]
SeroProtect[1,2:103]
mean(SeroProtect[1,2:103])
SeroProtect[1,2:103]%>%as.numeric()
SeroProtect[1,2:103]%>%as.numeric()%>%mean()
SeroProtect[2,2:103]%>%as.numeric()%>%mean()
SeroProtect[3,2:103]%>%as.numeric()%>%mean()
head(x)
#Import long format seroproection matrix (used by predictY function as input)
SP_long=readRDS(here("Data","SP_long_4k"))
#Import model object
Mod_rep20maxit10=readRDS(here("./Export/test/GBTM_mods_rep20maxit10"))
plot(Mod_rep20maxit10[[2]])
#plot predicted trajectories for k=2~6
plotGBTM=function(mod){
datnew=data.frame(Week = seq(1, 103)/10)
par(mfrow=c(3,2),oma=c(1,1,1.5,1)+0.1,mar=c(4,4,3,1)+0.1)
for (k in 1:length(mod)){
Legend=c(sapply(1:k, function(i){
paste0("Group ",i)
}))
plotpred=predictY(mod[[k]],datnew,var.time="Week", draws=2000)
plot(plotpred,lty=1, xlab="Week", ylab="Probability", shades=TRUE, xaxt="n", yaxt="n",legend=NULL,main=paste0("K=",k))
legend("topright",Legend,cex=0.5,lty=1, col=1:k,bty = "n")
axis(1, at =seq(0, 103, by=10)/10,label=seq(0, 103, by=10))
axis(2,at=seq(0,1,by=0.1), label=seq(0,1,by=0.1),las=1)
}
obj=deparse(substitute(mod))
params=regmatches(obj, gregexpr("[[:digit:]]+", obj))[[1]]%>%as.numeric()
title=sprintf("Predicted trajectories of PrEP sero-protection (Rand.Init=%d, Maxiter=%d)",params[1],params[2])
mtext(title, side=3,line = 0,outer = TRUE)
}
plotGBTM(Mod_rep20maxit10)
x=Mod_rep20maxit10[[2]]$pprob
head(x)
x
x$class
SeroProtect[,2:103]
SeroProtect[,2:104]
y=SeroProtect[,2:104]
y[which(x$class==1),]
y[which(x$class==1),]%>%as.numeric()
y[which(x$class==1),]%>%as.matrix()
y[which(x$class==2),]%>%as.matrix()
y[which(x$class==1),]%>%as.matrix()%>%colmeans()
y[which(x$class==1),]%>%as.matrix()%>%colmean()
y[which(x$class==1),]%>%as.matrix()%>%colMean()
y[which(x$class==1),]%>%as.matrix()%>%colMeans()
p1=y[which(x$class==1),]%>%as.matrix()%>%colMeans()
p2=y[which(x$class==2),]%>%as.matrix()%>%colMeans()
plot(p1)
plot(p2)
x=Mod_rep20maxit10[[3]]$pprob
head(x)
y=SeroProtect[,2:104]
p1=y[which(x$class==1),]%>%as.matrix()%>%colMeans()
p2=y[which(x$class==2),]%>%as.matrix()%>%colMeans()
p3=y[which(x$class==3),]%>%as.matrix()%>%colMeans()
plot(p1)
plot(p2)
plot(p3)
.rs.restartR()
plot(p1)
library(here)
# install.packages('gt')
library(gt)
# install.packages('webshot2')
library(webshot2)
# install.packages("matrixStats")
library(matrixStats)
library(here)
library(lcmm)
#Import long format seroproection matrix (used by predictY function as input)
SP_long=readRDS(here("Data","SP_long_4k"))
#Import model object
Mod_rep20maxit10=readRDS(here("./Export/test/GBTM_mods_rep20maxit10"))
datnew=data.frame(Week = seq(1, 103)/10)
datnew
plotpred=predictY(mod[[k]],datnew,var.time="Week", draws=2000)
mod=Mod_rep20maxit10[[3]]
predictY(mod[[k]],datnew,var.time="Week", draws=2000)
k=3
predictY(mod,datnew,var.time="Week", draws=2000)
plotpred=predictY(mod,datnew,var.time="Week", draws=2000)
plot(plotpred,lty=1, xlab="Week", ylab="Probability", shades=TRUE, xaxt="n", yaxt="n",legend=NULL,main=paste0("K=",k))
legend("topright",Legend,cex=0.5,lty=1, col=1:k,bty = "n")
Legend=c(sapply(1:k, function(i){
paste0("Group ",i)
}))
Legend
plot(plotpred,lty=1, xlab="Week", ylab="Probability", shades=TRUE, xaxt="n", yaxt="n",legend=NULL,main=paste0("K=",k))
legend("topright",Legend,cex=0.5,lty=1, col=1:k,bty = "n")
postprob(Mod_rep20maxit10[[3]])
x=Mod_rep20maxit10[[3]]$pprob
head(x)
y
y=SeroProtect[,2:104]
SeroProtect=read.delim(here("./Data/SeroProtect_4k.txt"),sep=",",header=FALSE)
colnames(SeroProtect)=c("ID",sapply(1:103, function(i){
paste0("Protect",i)
}))
y=SeroProtect[,2:104]
SeroProtect$ID
SeroProtect$ID[1:5]
SP_long[1:5]
SP_long[1:5,]
SeroProtect$ID%>%min()
SP_long$IS%>%min()
SP_long$ID%>%min()
dim(SeroProtect)
rm(list=ls())
renv::snapshot()
#load libraries -----------------------------------------------------------------
library(lcmm)
library(tidyr)
library(renv)
library(dplyr)
library(rlang)
library(LCTMtools)
library(here)
library(ellipsis)
#Import input data --------------------------------------------------------------
SeroProtect=read.delim(here("./Data/SeroProtect_4k.txt"),sep=",",header=FALSE)
colnames(SeroProtect)=c("ID",sapply(1:103, function(i){
paste0("Protect",i)
}))
#Convert wide to long format-----------------------------------------------------
SP_long=SeroProtect%>%tidyr::gather(., Week, Protect,Protect1:Protect103, factor_key=TRUE)
SP_long$Week=gsub("Protect","",SP_long$Week)%>%as.numeric()
SP_long=SP_long%>%arrange(ID,Week)
##scale down the time variable to facilitate model convergence
SP_long$Week=SP_long$Week/10
saveRDS(SP_long,here("./Data/SP_long_4k"))
#Run 1-group latent class trajectory model ---------------------------------------------------
mod=list()
mod[[1]]=lcmm(Protect~1+Week+I(Week^2), subject='ID',ng=1,data=SP_long, link="thresholds", maxiter=200)
# Implement K=2~6 GBTM--------------------------------------------------------------------------
source(here("Programs","Helper_Functions_GBTM.R"))
num_rep=20
num_maxit=10
Ncore=detectCores()-1
Time_rep20maxit10=rep(NA,6)
mod[[2]]=mod[[3]]=mod[[4]]=mod[[5]]=mod[[6]]=NULL
for (k in 2:6){
cat("K=",k)
t1=Sys.time()
cl=makeCluster(Ncore-1)
clusterExport(cl,list("k",'lcmm'),environment())
mod[[k]]=gridsearch(rep = num_rep, maxiter = num_maxit, minit = mod[[1]],
lcmm(fixed=Protect~1+Week+I(Week^2),random=~-1, mixture=~1+Week+I(Week^2),
subject='ID',ng=k,data=SP_long, link="thresholds",nwg=FALSE),cl=cl)
stopCluster(cl)
t2=Sys.time()
Time_rep20maxit10[k]=difftime(t2,t1,units ='mins')
}
saveRDS(mod,here("./Export/GBTM_data4k_rep20maxit10"))
# mod=readRDS(here("./Export/GBTM_data4k_rep20maxit10"))
Modfit_data4k_rep20maxit10=GBTM_stat(mod)
ExportStuff=list(Time_rep20maxit10,Modfit_data4k_rep20maxit10)
saveRDS(ExportStuff,here("./Export/Stats_data4k_rep20maxit10"))
